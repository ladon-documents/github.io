"use strict";(self.webpackChunkladon_docu=self.webpackChunkladon_docu||[]).push([[2975],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>p});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,p=d["".concat(u,".").concat(m)]||d[m]||g[m]||a;return t?r.createElement(p,c(c({ref:n},l),{},{components:t})):r.createElement(p,c({ref:n},l))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},25838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(58168),o=(t(96540),t(15680));const a={},c="Ladon Document Storage",i={unversionedId:"Backend Concepts/LadonDocumentStorage",id:"Backend Concepts/LadonDocumentStorage",title:"Ladon Document Storage",description:"Concepts",source:"@site/docs/Backend Concepts/LadonDocumentStorage.md",sourceDirName:"Backend Concepts",slug:"/Backend Concepts/LadonDocumentStorage",permalink:"/build/docs/Backend Concepts/LadonDocumentStorage",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Backend Concepts/LadonDocumentStorage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EventBus",permalink:"/build/docs/Backend Concepts/EventBus"},next:{title:"Ladon Repository",permalink:"/build/docs/Backend Concepts/LadonRepository"}},u={},s=[{value:"Concepts",id:"concepts",level:2},{value:"Known Issues",id:"known-issues",level:2}],l={toc:s},d="wrapper";function g(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"ladon-document-storage"},"Ladon Document Storage"),(0,o.yg)("h2",{id:"concepts"},"Concepts"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"LadonDocumentStorage is the API for retrieving and writing documents independent from it's source."),(0,o.yg)("li",{parentName:"ul"},"LadonDocumentSource is a reduced version for read-only sources."),(0,o.yg)("li",{parentName:"ul"},"There is no need for physical persistence. If the implementation does forward request or generate documents on demand it is called virtual."),(0,o.yg)("li",{parentName:"ul"},"LadonDocumentSources can be enabled or disabled at runtime."),(0,o.yg)("li",{parentName:"ul"},"LadonDocumentStorages can be added via DI or OSGI plugins.")),(0,o.yg)("h2",{id:"known-issues"},"Known Issues"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"There is no identifier which bucket or repository belongs to which document source. The correct one to use is determined on every request via bucket lookup. This can lead to performance issues or errors. The bucketProtocol concept is not available in higher level APIs like S3."),(0,o.yg)("li",{parentName:"ul"},"LadonRepository managing the different document sources is not fully robust in case of errors.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-kotlin"},'interface LadonDocumentSource : Sortable {\n    fun bucketProtocol(): String\n    fun isEnabled() = true\n\n    fun setEnabled(enabled: Boolean) = Unit\n\n    fun getDocument(\n        userId: String,\n        bucket: String,\n        key: String\n    ): ContentDocument\n\n    fun getDocumentVersion(\n        userId: String,\n        bucket: String,\n        key: String,\n        version: String\n    ): ContentDocument\n\n\n    fun getDocumentVersionMetadata(\n        userId: String,\n        bucket: String,\n        key: String,\n        version: String\n    ): Document\n\n\n    fun getMetadata(\n        userId: String,\n        bucket: String,\n        key: String\n    ): Document\n\n    fun streamBuckets(userId: String, prefix: String = ""): Stream<Bucket>\n    fun bucketExists(userId: String, bucket: String): Boolean\n\n    fun getBucket(userId: String, bucket: String): Bucket\n\n\n    fun streamDocumentVersions(\n        userId: String,\n        bucket: String,\n        key: String\n    ): Stream<Document>\n\n\n    fun streamDocuments(\n        userId: String,\n        bucket: String,\n        prefix: String?,\n        marker: String?,\n        delimiter: String?,\n        showDeleted: Boolean?\n    ): Stream<Document>\n\n\n    fun streamAllChangesSince(\n        userId: String,\n        bucket: String,\n        since: LocalDateTime\n    ): Stream<Change>\n\n    fun streamAllChangesBetween(\n        userId: String,\n        start: LocalDateTime,\n        end: LocalDateTime\n    ): Stream<Change>\n\n\n    fun getLatestChange(\n        userId: String,\n        bucket: String\n    ): Change?\n}\n\n')))}g.isMDXComponent=!0}}]);