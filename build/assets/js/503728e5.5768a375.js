"use strict";(self.webpackChunkladon_docu=self.webpackChunkladon_docu||[]).push([[862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),k=a,m=p["".concat(c,".").concat(k)]||p[k]||d[k]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},28852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},s="Ladon Repository Tasks",i={unversionedId:"Backend Concepts/Tasks",id:"Backend Concepts/Tasks",title:"Ladon Repository Tasks",description:"+ Ladon Repository Tasks are asynchronous jobs runing inside the Ladon runtime.",source:"@site/docs/Backend Concepts/Tasks.md",sourceDirName:"Backend Concepts",slug:"/Backend Concepts/Tasks",permalink:"/doc/docs/Backend Concepts/Tasks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Backend Concepts/Tasks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scalablility",permalink:"/doc/docs/Backend Concepts/Scalablility"},next:{title:"Technologies",permalink:"/doc/docs/Backend Concepts/Technologies"}},c={},l=[{value:"Locks",id:"locks",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ladon-repository-tasks"},"Ladon Repository Tasks"),(0,a.kt)("h1",{id:"concepts"},"Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ladon Repository Tasks are asynchronous jobs runing inside the Ladon runtime."),(0,a.kt)("li",{parentName:"ul"},"Extension of AbstractLadonTask is the prefered way of use."),(0,a.kt)("li",{parentName:"ul"},"Logging of errors or the result into a document is done via adding data to the result object."),(0,a.kt)("li",{parentName:"ul"},"Tasks can be scheduled or started manual."),(0,a.kt)("li",{parentName:"ul"},"Tasks need to react to calls of the ",(0,a.kt)("em",{parentName:"li"},"kill")," method."),(0,a.kt)("li",{parentName:"ul"},"Tasks should report a status in percent by calling ",(0,a.kt)("em",{parentName:"li"},"updateStatus"))),(0,a.kt)("h1",{id:"known-issues"},"Known Issues"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Load balancing is missing. Maybe via events?"),(0,a.kt)("li",{parentName:"ul"},"ClusterLock mechanism creates a little overhead.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Named\nopen class DemoTask : AbstractLadonTask("DemoTask") {\n\n\n    override fun run() {\n        val i = params.firstOrNull { it.name == "durationInSeconds" }?.value?.toInt() ?: 60\n        for (x in 1..i) {\n            updateStatus(true, ((100.0 / i) * x).toInt())\n            println("Demotask $x of $i")\n            Thread.sleep(1000)\n        }\n        updateStatus(false, 100)\n    }\n\n    override fun params(): MutableList<TaskParam> {\n        return arrayListOf(TaskParam("durationInSeconds", "20"))\n    }\n\n    override fun logRun() = true\n}\n')),(0,a.kt)("h2",{id:"locks"},"Locks"),(0,a.kt)("p",null,"If you need tasks to run only once in a cluster and not on every node use the ",(0,a.kt)("em",{parentName:"p"},"doWithClusterLock")," mechanism."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},' doWithClusterLock("uniqueLockId") {\n\n}\n')))}d.isMDXComponent=!0}}]);