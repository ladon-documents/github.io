"use strict";(self.webpackChunkladon_docu=self.webpackChunkladon_docu||[]).push([[8017],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>f});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},82767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(58168),a=(t(96540),t(15680));const o={},i="LadonTxManager (Transaction Manager)",s={unversionedId:"Backend Concepts/LadonTxManager",id:"Backend Concepts/LadonTxManager",title:"LadonTxManager (Transaction Manager)",description:"Concepts",source:"@site/docs/Backend Concepts/LadonTxManager.md",sourceDirName:"Backend Concepts",slug:"/Backend Concepts/LadonTxManager",permalink:"/build/docs/Backend Concepts/LadonTxManager",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Backend Concepts/LadonTxManager.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ladon Repository",permalink:"/build/docs/Backend Concepts/LadonRepository"},next:{title:"Modules",permalink:"/build/docs/Backend Concepts/Modules"}},c={},l=[{value:"Concepts",id:"concepts",level:2},{value:"Known Issues",id:"known-issues",level:2}],u={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ladontxmanager-transaction-manager"},"LadonTxManager (Transaction Manager)"),(0,a.yg)("h2",{id:"concepts"},"Concepts"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Every document in Ladon has a versionId (ChangeToken). If the LadonDocumentStorage implementation supports versioning this is used to store multiple versions of the same document."),(0,a.yg)("li",{parentName:"ul"},"The versionId in the database implementation with cassandra is a time based UUID. This allows for time based views on a bucket of documents."),(0,a.yg)("li",{parentName:"ul"},"If the versionId to use for storage is retrieved from the LadonTxManager it allows for marking multiple documents with the same versionId. When a transaction is started it will return the same versionId for the current user until the transaction is closed. Otherwise it will generate a new one with every request."),(0,a.yg)("li",{parentName:"ul"},"A rollback results in deletion (wipe) of all documents with a given versionId. If the document did exist before then the old version is reset as the current version. If the document did not exist before it will be removed.")),(0,a.yg)("h2",{id:"known-issues"},"Known Issues"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Cluster wide transactions are not available with all persistence backends")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},"interface LadonTxManager {\n\n    fun startTx(\n        userId: String,\n        timeout: Duration = Duration.ofMinutes(15)\n    ): UUID\n\n    fun getCurrentTxId(\n        userId: String,\n    ): UUID?\n\n    fun <T> transactional(\n        body: Function<TxCtx, T?>\n    ): T?\n\n    fun commitTx(\n        userId: String,\n        txId: UUID\n    ): Boolean\n\n    fun rollbackTx(\n        userId: String,\n        txId: UUID\n    ): Boolean\n\n}\n")))}p.isMDXComponent=!0}}]);