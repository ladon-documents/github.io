"use strict";(self.webpackChunkladon_docu=self.webpackChunkladon_docu||[]).push([[2490],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,y=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(y,s(s({ref:n},u),{},{components:t})):r.createElement(y,s({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},32880:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const o={},s="Ladon Repository Tasks",i={unversionedId:"Backend Concepts/Tasks",id:"Backend Concepts/Tasks",title:"Ladon Repository Tasks",description:"+ Ladon Repository Tasks are asynchronous jobs runing inside the Ladon runtime.",source:"@site/docs/Backend Concepts/Tasks.md",sourceDirName:"Backend Concepts",slug:"/Backend Concepts/Tasks",permalink:"/build/docs/Backend Concepts/Tasks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Backend Concepts/Tasks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scalablility",permalink:"/build/docs/Backend Concepts/Scalablility"},next:{title:"Technologies",permalink:"/build/docs/Backend Concepts/Technologies"}},l={},c=[{value:"Locks",id:"locks",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ladon-repository-tasks"},"Ladon Repository Tasks"),(0,a.yg)("h1",{id:"concepts"},"Concepts"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Ladon Repository Tasks are asynchronous jobs runing inside the Ladon runtime."),(0,a.yg)("li",{parentName:"ul"},"Extension of AbstractLadonTask is the prefered way of use."),(0,a.yg)("li",{parentName:"ul"},"Logging of errors or the result into a document is done via adding data to the result object."),(0,a.yg)("li",{parentName:"ul"},"Tasks can be scheduled or started manual."),(0,a.yg)("li",{parentName:"ul"},"Tasks need to react to calls of the ",(0,a.yg)("em",{parentName:"li"},"kill")," method."),(0,a.yg)("li",{parentName:"ul"},"Tasks should report a status in percent by calling ",(0,a.yg)("em",{parentName:"li"},"updateStatus"))),(0,a.yg)("h1",{id:"known-issues"},"Known Issues"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Load balancing is missing. Maybe via events?"),(0,a.yg)("li",{parentName:"ul"},"ClusterLock mechanism creates a little overhead.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},'@Named\nopen class DemoTask : AbstractLadonTask("DemoTask") {\n\n\n    override fun run() {\n        val i = params.firstOrNull { it.name == "durationInSeconds" }?.value?.toInt() ?: 60\n        for (x in 1..i) {\n            updateStatus(true, ((100.0 / i) * x).toInt())\n            println("Demotask $x of $i")\n            Thread.sleep(1000)\n        }\n        updateStatus(false, 100)\n    }\n\n    override fun params(): MutableList<TaskParam> {\n        return arrayListOf(TaskParam("durationInSeconds", "20"))\n    }\n\n    override fun logRun() = true\n}\n')),(0,a.yg)("h2",{id:"locks"},"Locks"),(0,a.yg)("p",null,"If you need tasks to run only once in a cluster and not on every node use the ",(0,a.yg)("em",{parentName:"p"},"doWithClusterLock")," mechanism."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-kotlin"},' doWithClusterLock("uniqueLockId") {\n\n}\n')))}d.isMDXComponent=!0}}]);